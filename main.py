import os
import re
import ssl
import nltk
import base64
import telebot
import logging
import requests
import xml.etree.ElementTree as ET
from dotenv import load_dotenv
from nltk.sentiment import SentimentIntensityAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

ssl._create_default_https_context = ssl._create_unverified_context
nltk.download('vader_lexicon')

load_dotenv()
API_TOKEN = os.getenv("TOKEN_BOT")
YANDEX_GPT_API_KEY = os.getenv("YANDEX_GPT_API_KEY")
YANDEX_IAM_TOKEN = os.getenv("IAM_TOKEN") 
YANDEX_FOLDER_ID=os.getenv("YANDEX_FOLDER_ID")
CATALOG_ID = os.getenv("CATALOG_ID")


if not API_TOKEN:
    logging.error("API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª.")
    exit(1)

if not YANDEX_GPT_API_KEY or not CATALOG_ID:
    logging.warning("YANDEX_GPT_API_KEY –∏–ª–∏ CATALOG_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

if not YANDEX_IAM_TOKEN:
    logging.warning("YANDEX_IAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –§—É–Ω–∫—Ü–∏–∏ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

bot = telebot.TeleBot(API_TOKEN)
sia = SentimentIntensityAnalyzer()

user_in_generate_mode = {}

def generate_text_with_yandex_ai(prompt):
    try:
        logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Yandex Cloud GPT...")
        headers = {
            "Authorization": f"Api-Key {YANDEX_GPT_API_KEY}",
            "Content-Type": "application/json"
        }
        data = {
            "modelUri": f"gpt://{CATALOG_ID}/yandexgpt/latest",
            "completionOptions": {
                "stream": False,
                "temperature": 1,
                "maxTokens": 1000
            },
            "messages": [
                {"role": "system", "text": "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."},
                {"role": "user", "text": prompt}
            ]
        }
        url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        result = response.json()
        generated_text = result.get("result", {}).get("alternatives", [{}])[0].get("message", {}).get("text", "–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ Yandex GPT.")
        logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç Yandex GPT: {generated_text}")
        return generated_text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞."

def translate_text_with_yandex(text, source_lang='en', target_lang='ru'):
    try:
        url = "https://translate.api.cloud.yandex.net/translate/v2/translate"
        headers = {
            "Authorization": f"Api-Key {YANDEX_GPT_API_KEY}",
            "Content-Type": "application/json"
        }
        data = {
            "sourceLanguageCode": source_lang,
            "targetLanguageCode": target_lang,
            "texts": [text]
        }
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        result = response.json()
        translated_text = result['translations'][0]['text']
        return translated_text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
        return "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞."

def text_to_speech(text):
    try:
        tts_url = "https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize"
        headers = {
            "Authorization": f"Bearer {YANDEX_IAM_TOKEN}",
            "Content-Type": "application/x-www-form-urlencoded",
            "Accept": "audio/mp3"
        }
        payload = {
            "text": text,
            "lang": "ru-RU",
            "voice": "alexander",
            "speed": 1.1,
            "format": "mp3",
            "folderId": YANDEX_FOLDER_ID,
        }

        # –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Yandex TTS API —Å —Ç–µ–∫—Å—Ç–æ–º: {text[:30]}...")  # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞
        response = requests.post(tts_url, headers=headers, data=payload)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –∏ —Ç–µ–∫—Å—Ç
        logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç API: –°—Ç–∞—Ç—É—Å {response.status_code}")
        if response.status_code != 200:
            logging.error(f"–û—Ç–≤–µ—Ç –æ—Ç API: {response.text}")
            return None
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
        audio_file = f"speech_{abs(hash(text))}.mp3"
        with open(audio_file, "wb") as f:
            f.write(response.content)

        logging.info(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {audio_file}")
        return audio_file

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ —Ä–µ—á–∏: {e}")
        return None

def search_museum_info_api(museum_name):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∫ Yandex XML Search API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º—É–∑–µ–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: query, l10n, sortby, filter, maxpassages –∏ groupby.
    –î–ª—è –¥–æ—Å—Ç—É–ø–∞ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ YANDEX_XML_USER –∏ YANDEX_XML_API_KEY.
    """
    try:
        search_url = "https://yandex.ru/search/xml"
        params = {
            "query": museum_name,
            "l10n": "ru",
            "sortby": "tm.order=descending",
            "filter": "strict",
            "maxpassages": "4",
            "groupby": "attr=mode=flat.groups-on-page=10.docs-in-group=1",
            "user": YANDEX_IAM_TOKEN,
            "key": YANDEX_IAM_TOKEN
        }
        response = requests.get(search_url, params=params)
        response.raise_for_status()

        root = ET.fromstring(response.content)
        doc = root.find('.//doc')
        snippet = None
        if doc is not None:
            passage = doc.find('.//passage')
            if passage is not None and passage.text:
                snippet = passage.text.strip()
            else:
                title = doc.find('title')
                if title is not None and title.text:
                    snippet = title.text.strip()
        return snippet if snippet else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º—É–∑–µ–µ: {e}")
        return "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."

def create_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.row(telebot.types.KeyboardButton("üë®‚Äçüíª AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"), telebot.types.KeyboardButton("üåç –ü–µ—Ä–µ–≤–µ—Å—Ç–∏"))
    keyboard.row(telebot.types.KeyboardButton("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"), telebot.types.KeyboardButton("‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫–∏"))
    keyboard.add(telebot.types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))
    keyboard.add(telebot.types.KeyboardButton("üë®‚Äçüíº –ê—É–¥–∏–æ –ì–∏–¥"))
    return keyboard

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø TryCan –±–æ—Çü§ñ.\n–ù–∞–ø–∏—à–∏ 'üë®‚Äçüíª AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç' –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.", reply_markup=create_keyboard())

def analyze_image_without_text(image_path):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Yandex Vision –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–∫—Ç–æ–≤"""
    try:
        with open(image_path, "rb") as image_file:
            encoded_image = base64.b64encode(image_file.read()).decode("utf-8")
        url = "https://vision.api.cloud.yandex.net/vision/v1/batchAnalyze"
        headers = {
            "Authorization": f"Bearer {YANDEX_IAM_TOKEN}",
            "Content-Type": "application/json"
        }
        data = {
            "analyze_specs": [{
                "content": encoded_image,
                "features": [{"type": "LABEL_DETECTION"}, {"type": "TEXT_DETECTION"}]
            }]
        }
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        result = response.json()
        if "results" in result and result["results"]:
            objects = result["results"][0].get("labelAnnotations", [])
            scene_description = ", ".join([obj['description'] for obj in objects]) if objects else "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã."
            return scene_description
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

@bot.message_handler(content_types=["photo"])
def handle_photo(message):
    bot.reply_to(message, "–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å–∫–∞–∑–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

@bot.message_handler(func=lambda message: message.text.lower() == "üìä –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
def analyze_text_handler(message):
    bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    bot.register_next_step_handler(message, process_analyze)

def process_analyze(message):
    text_to_analyze = message.text
    thinking_message = bot.send_message(message.chat.id, "–†–∞–∑–º—ã—à–ª—è–µ—Ç...")
    try:
        analysis_prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, –æ–ø—Ä–µ–¥–µ–ª–∏ —è–∑—ã–∫, –≤—ã–¥–µ–ª–∏ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–∞:\n\n{text_to_analyze}"
        response = generate_text_with_yandex_ai(analysis_prompt)
        formatted_response = f"*–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞:*\n{response}"
        bot.edit_message_text(formatted_response, chat_id=message.chat.id, message_id=thinking_message.message_id, parse_mode="Markdown")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞: {e}")

@bot.message_handler(func=lambda message: message.text.lower() == "üë®‚Äçüíª ai –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
def activate_generate_mode(message):
    bot.reply_to(message, "–¢—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª üë®‚Äçüíª AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç! –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –Ω–∞–ø–∏—à–∏: `—Å–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –∑–∞ –ø–æ–º–æ—â—å! –¥–æ –≤—Å—Ç—Ä–µ—á–∏!`", parse_mode="Markdown")
    user_in_generate_mode[message.chat.id] = True

def process_generate_text(message):
    prompt = message.text
    thinking_message = bot.send_message(message.chat.id, "–†–∞–∑–º—ã—à–ª—è–µ—Ç...")
    response = generate_text_with_yandex_ai(prompt)
    formatted_response = f"*–û—Ç–≤–µ—Ç –æ—Ç AI:*\n{response}"
    bot.edit_message_text(formatted_response, chat_id=message.chat.id, message_id=thinking_message.message_id, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text.lower() == "üåç –ø–µ—Ä–µ–≤–µ—Å—Ç–∏")
def translate_text_handler(message):
    bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
    bot.register_next_step_handler(message, process_translate)

def process_translate(message):
    text_to_translate = message.text
    try:
        translated_text = translate_text_with_yandex(text_to_translate, from_lang, to_lang)
        bot.reply_to(message, f"–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: *{translated_text}*", parse_mode="Markdown")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")

@bot.message_handler(func=lambda message: message.text.lower() == "‚öôÔ∏è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫–∏")
def set_language(message):
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞, example: ru en")
    bot.register_next_step_handler(message, process_set_lang)

def process_set_lang(message):
    global from_lang, to_lang
    try:
        new_from_lang, new_to_lang = message.text.split()
        from_lang, to_lang = new_from_lang.lower(), new_to_lang.lower()
        bot.reply_to(message, f"–Ø–∑—ã–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {from_lang} -> {to_lang}.")
    except ValueError:
        bot.reply_to(message, "–û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: en ru")

@bot.message_handler(func=lambda message: message.text.lower() == "‚ùì –ø–æ–º–æ—â—å")
def send_help(message):
    bot.reply_to(message, "–Ø –º–æ–≥—É:\n*1.* –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Yandex GPT 'üë®‚Äçüíª AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç'.\n*2.* –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π 'üåç –ü–µ—Ä–µ–≤–µ—Å—Ç–∏'.\n*3.* –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –æ—à–∏–±–∫–∏ –∏ —É–ª—É—á—à–µ–Ω–∏–µ 'üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å'.\n*4.* –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —è–∑—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ '‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫–∏'.", parse_mode="Markdown")

@bot.message_handler(func=lambda message: user_in_generate_mode.get(message.chat.id, False))
def handle_generated_mode(message):
    prompt = message.text
    if prompt.lower() == "—Å–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –∑–∞ –ø–æ–º–æ—â—å! –¥–æ –≤—Å—Ç—Ä–µ—á–∏!":
        bot.reply_to(message, "–î–æ –≤—Å—Ç—Ä–µ—á–∏!")
        user_in_generate_mode[message.chat.id] = False
    else:
        thinking_message = bot.send_message(message.chat.id, "–†–∞–∑–º—ã—à–ª—è–µ—Ç...")
        response = generate_text_with_yandex_ai(prompt)
        formatted_response = f"*–û—Ç–≤–µ—Ç –æ—Ç AI:*\n{response}"
        bot.edit_message_text(formatted_response, chat_id=message.chat.id, message_id=thinking_message.message_id, parse_mode="Markdown")

########################################
# –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: –ê—É–¥–∏–æ –º—É–∑–µ–π
########################################
@bot.message_handler(func=lambda message: message.text.lower() == "üë®‚Äçüíº –∞—É–¥–∏–æ –≥–∏–¥")
def ask_museum_name(message):
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º—É–∑–µ—è:")
    bot.register_next_step_handler(message, process_museum_audio)

def clean_text_for_speech(text):
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    return re.sub(r'[^\w\s]', '', text)

def process_museum_audio(message):
    museum_name = message.text.strip()
    
    # –®–∞–≥ 1: –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º—É–∑–µ–µ —á–µ—Ä–µ–∑ Yandex XML Search API
    search_info = search_museum_info_api(museum_name)
    
    # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –º—É–∑–µ—è —á–µ—Ä–µ–∑ AI
    prompt = f"–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º—É–∑–µ–µ '{museum_name}': {search_info}\n–Ω–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º—É–∑–µ—è –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è."
    description = generate_text_with_yandex_ai(prompt)
    
    # –®–∞–≥ 3: –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
    cleaned_description = clean_text_for_speech(description)
    final_text = f"{cleaned_description}\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è –º—É–∑–µ—è {museum_name}!"
    
    # –®–∞–≥ 4: –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
    audio_path = text_to_speech(final_text)
    if audio_path:
        with open(audio_path, 'rb') as audio:
            bot.send_voice(message.chat.id, audio)
        os.remove(audio_path)  # –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    else:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ç–µ–∑–µ —Ä–µ—á–∏.")

bot.polling(none_stop=True)