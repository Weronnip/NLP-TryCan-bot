import os
import ssl
import nltk
import telebot
import logging
import requests
from dotenv import load_dotenv
from deep_translator import GoogleTranslator
from nltk.sentiment import SentimentIntensityAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

ssl._create_default_https_context = ssl._create_unverified_context
nltk.download('vader_lexicon')

load_dotenv()
API_TOKEN = os.getenv("TOKEN_BOT")
YANDEX_GPT_API_KEY = os.getenv("YANDEX_GPT_API_KEY")
CATALOG_ID = os.getenv("CATALOG_ID")

if not API_TOKEN:
    logging.error("API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª.")
    exit(1)

if not YANDEX_GPT_API_KEY or not CATALOG_ID:
    logging.warning("YANDEX_GPT_API_KEY –∏–ª–∏ CATALOG_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

bot = telebot.TeleBot(API_TOKEN)
sia = SentimentIntensityAnalyzer()
from_lang = 'en'
to_lang = 'ru'

def generate_text_with_yandex_ai(prompt):
    try:
        logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Yandex Cloud GPT...")
        headers = {
            "Authorization": f"Api-Key {YANDEX_GPT_API_KEY}",
            "Content-Type": "application/json"
        }
        data = {
            "modelUri": f"gpt://{CATALOG_ID}/yandexgpt-lite",
            "completionOptions": {
                "stream": False,
                "temperature": 0.6,
                "maxTokens": 2000
            },
            "messages": [
                {"role": "system", "text": "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."},
                {"role": "user", "text": prompt}
            ]
        }
        url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        
        result = response.json()
        generated_text = result.get("result", {}).get("alternatives", [{}])[0].get("message", {}).get("text", "–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ Yandex GPT.")
        logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç Yandex GPT: {generated_text}")
        return generated_text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞."

def create_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.row(telebot.types.KeyboardButton("/help"), telebot.types.KeyboardButton("/generate"))
    keyboard.row(telebot.types.KeyboardButton("/translate"), telebot.types.KeyboardButton("/analyze"))
    keyboard.add(telebot.types.KeyboardButton("/setlang"))
    return keyboard

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø TryCan –±–æ—Çü§ñ. –ù–∞–ø–∏—à–∏ /help —á—Ç–æ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥", reply_markup=create_keyboard())

@bot.message_handler(commands=['generate'])
def generate_text_handler(message):
    bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
    bot.register_next_step_handler(message, process_generate_text)

def process_generate_text(message):
    prompt = message.text
    response = generate_text_with_yandex_ai(prompt)
    bot.reply_to(message, response)

@bot.message_handler(commands=['setlang'])
def set_language(message):
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞, example: ru en")
    bot.register_next_step_handler(message, process_set_lang)

def process_set_lang(message):
    global from_lang, to_lang
    try:
        new_from_lang, new_to_lang = message.text.split()
        from_lang, to_lang = new_from_lang.lower(), new_to_lang.lower()
        bot.reply_to(message, f"–Ø–∑—ã–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {from_lang} -> {to_lang}.")
    except ValueError:
        bot.reply_to(message, "–û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: en ru")

@bot.message_handler(commands=['translate'])
def translate_text_handler(message):
    bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
    bot.register_next_step_handler(message, process_translate)

def process_translate(message):
    text_to_translate = message.text
    try:
        translation = GoogleTranslator(source=from_lang, target=to_lang).translate(text_to_translate)
        bot.reply_to(message, f"–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {translation}")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")

@bot.message_handler(commands=['analyze'])
def analyze_text_handler(message):
    bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    bot.register_next_step_handler(message, process_analyze)

def process_analyze(message):
    text_to_analyze = message.text
    sentiment = sia.polarity_scores(text_to_analyze)
    response = "–í–∞—à —Ç–µ–∫—Å—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π."
    if sentiment['compound'] >= 0.05:
        response = "–í–∞—à —Ç–µ–∫—Å—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π!"
    elif sentiment['compound'] <= -0.05:
        response = "–í–∞—à —Ç–µ–∫—Å—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π."
    bot.reply_to(message, response)

@bot.message_handler(commands=['help'])
def send_help(message):
    bot.reply_to(message, "–Ø –º–æ–≥—É:\n"
                          "1. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à —Ç–µ–∫—Å—Ç –Ω–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π/–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π /analyze.\n"
                          "2. –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π /translate.\n"
                          "3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —è–∑—ã–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /setlang. \n"
                          "4. –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Yandex GPT /generate.")

bot.polling(none_stop=True)
